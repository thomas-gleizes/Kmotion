// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  email      String     @unique @db.VarChar(255)
  password   String     @db.VarChar(255)
  slug       String     @unique @db.VarChar(255)
  isAdmin    Boolean    @default(false) @map("is_admin")
  isActivate Boolean    @default(false) @map("is_activate")
  visibility Visibility @default(private)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @map("updated_at")

  playlists Playlist[]
  musics    Music[]

  @@map("users")
}

model Music {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  artist       String?  @db.VarChar(128)
  channel      String?  @db.VarChar(128)
  youtubeId    String   @unique @map("youtube_id") @db.VarChar(24)
  downloaderId Int      @map("downloader_id")
  duration     Float    @db.Float
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  playlistEntries PlaylistEntry[]
  downloader      User            @relation(fields: [downloaderId], references: [id])

  @@map("musics")
}

model Playlist {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  description String     @db.VarChar(255)
  slug        String     @unique @db.VarChar(255)
  authorId    Int        @map("author_id")
  visibility  Visibility @default(private)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")

  author  User            @relation(fields: [authorId], references: [id])
  entries PlaylistEntry[]

  @@map("playlists")
}

model PlaylistEntry {
  playlistId Int      @map("playlist_id")
  musicId    Int      @map("music_id")
  position   Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  playlist Playlist @relation(fields: [playlistId], references: [id])
  music    Music    @relation(fields: [musicId], references: [id])

  @@id([playlistId, musicId])
  @@map("playlist_entries")
}

model BypassCode {
  id        Int            @id @default(autoincrement())
  code      String         @unique @db.VarChar(255)
  targetId  String         @map("target_id") @db.VarChar(255)
  type      BypassCodeType
  valid     Boolean        @default(true)
  expireAt  DateTime       @map("expireAt")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @map("updated_at")

  @@map("bypass_codes")
}

enum BypassCodeType {
  playlist
  music
}

enum Visibility {
  private
  public
}
